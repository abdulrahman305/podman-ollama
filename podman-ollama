#!/bin/bash

usage() {
    echo "The goal of podman-ollama is to make AI even more boring."
    echo
    echo "Usage:"
    echo "  podman-ollama [prompt]"
    echo "  podman-ollama [options]"
    echo "  podman-ollama [command]"
    echo
    echo "Commands:"
    echo "  create      Create a model from a Modelfile"
    echo "  show        Show information for a model"
    echo "  run         Run a model, default if no command is specified"
    echo "  pull        Pull a model from a registry"
    echo "  push        Push a model to a registry"
    echo "  list        List models"
    echo "  cp          Copy a model"
    echo "  rm          Remove a model"
    echo "  help        Help about any command"
    echo
    echo "Options:"
    echo "  -c, --container-manager CONMAN - Specify podman or docker, default: podman"
    echo "  -g, --gpu GPU                  - Specify a GPU, valid values are AMD and OTHER"
    echo "  -h, --help                     - Usage help"
    echo "  -l, --log LOGFILE              - Specify logfile to redirect to, for GPU debug"
    echo "  -m, --model MODEL              - Specify non-default model, default: $LLM"
    echo "  -r, --root                     - Run as a rootful, insecure container"
    echo "  -v, --version                  - Show version information"
    echo "  -                              - Read from stdin"
}

cleanup() {
  $SUDO $CON exec $CON_PS pkill ollama &
}

check_root() {
  if [ "$EUID" -eq 0 ]; then
    if ! $ROOT; then
      echo "to run as a rootful, insecure container, use this command:"
      echo "  podman-ollama -r"
      exit 3
    fi
  elif $ROOT; then
    if command -v sudo > /dev/null; then
      SUDO="sudo"
    else
      echo "to run as a rootful, insecure container, use this command as root user:"
      echo "  podman-ollama -r"
      exit 4
    fi
  fi
}

gpu_setup() {
  if [ -e "/dev/dri" ]; then
    ADD="--device /dev/dri"
  fi

  POST="latest"
  if [ "$GPU" = "OTHER" ]; then
    POST="latest"
  elif [ "$GPU" = "AMD" ]; then
    ADD="$ADD --device /dev/kfd"
    POST="rocm"
  elif [ -e "/dev/kfd" ]; then
    for i in /sys/bus/pci/devices/*/mem_info_vram_total; do
      # AMD GPU needs more than 512M VRAM
      if [ "$(cat $i)" -gt "600000000" ]; then
        ADD="$ADD --device /dev/kfd"
        POST="rocm"
        break
      fi
    done
  fi
}

server_init() {
  check_root
  specify_gpu
  select_container_manager
  gpu_setup
  trap cleanup EXIT

  if [ -n "$OLLAMA_FILE" ]; then
    ADD="$ADD -v"$OLLAMA_FILE":"$OLLAMA_FILE""
  fi

  VOL="-vollama:/root/.ollama"
  URL="docker.io/ollama/ollama:$POST"

  # This was introduced as part of ChromeOS support, but there was concerns
  # raised about rootful privileged containers, lets just do this in the rootless
  # case for now.
  if [ "$EUID" -ne 0 ]; then
    PRIV="--privileged"
  fi

  GPU="--gpus=all"
  if [ -n "$LOG" ]; then
    CON_PS="$(cat /proc/sys/kernel/random/uuid)"
    NAME="--name $CON_PS"
    $SUDO $CON run --rm $PRIV $NAME $ADD $GPU -v"$HOME":"$HOME" $VOL $URL > "$LOG" 2>&1 &
    while ! podman ps | grep -q $CON_PS; do
      sleep 0.001
    done
  else
    CON_PS=$($SUDO $CON run --rm $PRIV $ADD $GPU -v"$HOME":"$HOME" $VOL -d $URL)
    RET="$?"
    if [ "$RET" -ne 0 ]; then
      echo "$CON_PS"
      exit $RET
    fi
  fi
}

select_container_manager() {
  if command -v podman > /dev/null; then
    CON="podman"
  elif command -v docker > /dev/null; then
    CON="docker"
  else
    CON="podman"
  fi

  if [ -n "$CONMAN" ]; then
    shopt -s nocasematch
    case "$CONMAN" in
      podman ) CON="podman";;
      docker) CON="docker";;
      *) echo "Unknown container manager: $CONMAN"; exit 2;;
    esac

    shopt -u nocasematch
  fi
}

specify_gpu() {
  if [ -n "$GPU" ]; then
    shopt -s nocasematch
    case "$GPU" in
      OTHER ) GPU="OTHER";;
      AMD) GPU="AMD";;
      *) echo "Unknown GPU: $GPU"; exit 2;;
    esac

    shopt -u nocasematch
  fi
}

set_initial_vars() {
  LLM="mistral"
  STDIN="false"
  ROOT="false"
}

set -e -o pipefail

set_initial_vars
while [[ $# -gt 0 ]]; do
  case $1 in
    create|show|run|pull|push|list|cp|rm|help)
      OLLAMA_CMD="$1"
      break
      ;;
    -c|--container-manager)
      CONMAN="$2"
      shift 2
      ;;
    -g|--gpu)
      GPU="$2"
      shift 2
      ;;
    -h|--help)
      usage
      exit 0
      ;;
    -l|--log)
      LOG="$2"
      shift 2
      ;;
    -m|--model)
      LLM="$2"
      shift 2
      ;;
    -r|--root)
      ROOT="true"
      shift 1
      ;;
    -v|--version)
      VERSION="$1"
      shift 1
      ;;
    -)
      STDIN="true"
      shift 1
      ;;
    -*|--*)
      usage
      echo "Unknown option $1"
      exit 1
      ;;
    *)
      break;
      ;;
  esac
done

if [ "$1" = "create" ]; then
  while [[ $# -gt 0 ]]; do
    case $3 in
        -f|--file)
          OLLAMA_MODEL="$2"
          OLLAMA_FILE="$(readlink -f $4)"
          shift 4
          break
          ;;
        *)
          break;
          ;;
      esac
  done

  if [ -z "$OLLAMA_FILE" ] && [ -e "Modelfile" ]; then
    OLLAMA_FILE="$(readlink -f Modelfile)"
    shift 1
  fi
fi

server_init

if [ -n "$VERSION" ]; then
  $SUDO $CON exec $CON_PS ollama $VERSION
elif [ -n "$OLLAMA_FILE" ]; then
  $SUDO $CON exec $CON_PS ollama create $OLLAMA_MODEL -f "$OLLAMA_FILE" $*
elif [ -n "$OLLAMA_CMD" ]; then
  $SUDO $CON exec $CON_PS ollama $*
elif $STDIN; then
  $SUDO $CON exec $CON_PS ollama run $LLM "$(cat /dev/stdin)"
elif [ -n "$1" ]; then
  $SUDO $CON exec $CON_PS ollama run $LLM "$1"
else
  $SUDO $CON exec -it $CON_PS ollama run $LLM
fi

