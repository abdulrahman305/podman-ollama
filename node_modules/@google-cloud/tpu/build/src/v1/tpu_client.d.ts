/// <reference types="node" />
import type * as gax from 'google-gax';
import type { Callback, CallOptions, Descriptors, ClientOptions, LROperation, PaginationCallback, LocationsClient, LocationProtos } from 'google-gax';
import { Transform } from 'stream';
import * as protos from '../../protos/protos';
/**
 *  Manages TPU nodes and other resources
 *
 *  TPU API v1
 * @class
 * @memberof v1
 */
export declare class TpuClient {
    private _terminated;
    private _opts;
    private _providedCustomServicePath;
    private _gaxModule;
    private _gaxGrpc;
    private _protos;
    private _defaults;
    private _universeDomain;
    private _servicePath;
    auth: gax.GoogleAuth;
    descriptors: Descriptors;
    warn: (code: string, message: string, warnType?: string) => void;
    innerApiCalls: {
        [name: string]: Function;
    };
    locationsClient: LocationsClient;
    pathTemplates: {
        [name: string]: gax.PathTemplate;
    };
    operationsClient: gax.OperationsClient;
    tpuStub?: Promise<{
        [name: string]: Function;
    }>;
    /**
     * Construct an instance of TpuClient.
     *
     * @param {object} [options] - The configuration object.
     * The options accepted by the constructor are described in detail
     * in [this document](https://github.com/googleapis/gax-nodejs/blob/main/client-libraries.md#creating-the-client-instance).
     * The common options are:
     * @param {object} [options.credentials] - Credentials object.
     * @param {string} [options.credentials.client_email]
     * @param {string} [options.credentials.private_key]
     * @param {string} [options.email] - Account email address. Required when
     *     using a .pem or .p12 keyFilename.
     * @param {string} [options.keyFilename] - Full path to the a .json, .pem, or
     *     .p12 key downloaded from the Google Developers Console. If you provide
     *     a path to a JSON file, the projectId option below is not necessary.
     *     NOTE: .pem and .p12 require you to specify options.email as well.
     * @param {number} [options.port] - The port on which to connect to
     *     the remote host.
     * @param {string} [options.projectId] - The project ID from the Google
     *     Developer's Console, e.g. 'grape-spaceship-123'. We will also check
     *     the environment variable GCLOUD_PROJECT for your project ID. If your
     *     app is running in an environment which supports
     *     {@link https://developers.google.com/identity/protocols/application-default-credentials Application Default Credentials},
     *     your project ID will be detected automatically.
     * @param {string} [options.apiEndpoint] - The domain name of the
     *     API remote host.
     * @param {gax.ClientConfig} [options.clientConfig] - Client configuration override.
     *     Follows the structure of {@link gapicConfig}.
     * @param {boolean} [options.fallback] - Use HTTP/1.1 REST mode.
     *     For more information, please check the
     *     {@link https://github.com/googleapis/gax-nodejs/blob/main/client-libraries.md#http11-rest-api-mode documentation}.
     * @param {gax} [gaxInstance]: loaded instance of `google-gax`. Useful if you
     *     need to avoid loading the default gRPC version and want to use the fallback
     *     HTTP implementation. Load only fallback version and pass it to the constructor:
     *     ```
     *     const gax = require('google-gax/build/src/fallback'); // avoids loading google-gax with gRPC
     *     const client = new TpuClient({fallback: true}, gax);
     *     ```
     */
    constructor(opts?: ClientOptions, gaxInstance?: typeof gax | typeof gax.fallback);
    /**
     * Initialize the client.
     * Performs asynchronous operations (such as authentication) and prepares the client.
     * This function will be called automatically when any class method is called for the
     * first time, but if you need to initialize it before calling an actual method,
     * feel free to call initialize() directly.
     *
     * You can await on this method if you want to make sure the client is initialized.
     *
     * @returns {Promise} A promise that resolves to an authenticated service stub.
     */
    initialize(): Promise<{
        [name: string]: Function;
    }>;
    /**
     * The DNS address for this API service.
     * @deprecated Use the apiEndpoint method of the client instance.
     * @returns {string} The DNS address for this service.
     */
    static get servicePath(): string;
    /**
     * The DNS address for this API service - same as servicePath.
     * @deprecated Use the apiEndpoint method of the client instance.
     * @returns {string} The DNS address for this service.
     */
    static get apiEndpoint(): string;
    /**
     * The DNS address for this API service.
     * @returns {string} The DNS address for this service.
     */
    get apiEndpoint(): string;
    get universeDomain(): string;
    /**
     * The port for this API service.
     * @returns {number} The default port for this service.
     */
    static get port(): number;
    /**
     * The scopes needed to make gRPC calls for every method defined
     * in this service.
     * @returns {string[]} List of default scopes.
     */
    static get scopes(): string[];
    getProjectId(): Promise<string>;
    getProjectId(callback: Callback<string, undefined, undefined>): void;
    /**
     * Gets the details of a node.
     *
     * @param {Object} request
     *   The request object that will be sent.
     * @param {string} request.name
     *   Required. The resource name.
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Promise} - The promise which resolves to an array.
     *   The first element of the array is an object representing {@link protos.google.cloud.tpu.v1.Node|Node}.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods | documentation }
     *   for more details and examples.
     * @example <caption>include:samples/generated/v1/tpu.get_node.js</caption>
     * region_tag:tpu_v1_generated_Tpu_GetNode_async
     */
    getNode(request?: protos.google.cloud.tpu.v1.IGetNodeRequest, options?: CallOptions): Promise<[
        protos.google.cloud.tpu.v1.INode,
        protos.google.cloud.tpu.v1.IGetNodeRequest | undefined,
        {} | undefined
    ]>;
    getNode(request: protos.google.cloud.tpu.v1.IGetNodeRequest, options: CallOptions, callback: Callback<protos.google.cloud.tpu.v1.INode, protos.google.cloud.tpu.v1.IGetNodeRequest | null | undefined, {} | null | undefined>): void;
    getNode(request: protos.google.cloud.tpu.v1.IGetNodeRequest, callback: Callback<protos.google.cloud.tpu.v1.INode, protos.google.cloud.tpu.v1.IGetNodeRequest | null | undefined, {} | null | undefined>): void;
    /**
     * Gets TensorFlow Version.
     *
     * @param {Object} request
     *   The request object that will be sent.
     * @param {string} request.name
     *   Required. The resource name.
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Promise} - The promise which resolves to an array.
     *   The first element of the array is an object representing {@link protos.google.cloud.tpu.v1.TensorFlowVersion|TensorFlowVersion}.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods | documentation }
     *   for more details and examples.
     * @example <caption>include:samples/generated/v1/tpu.get_tensor_flow_version.js</caption>
     * region_tag:tpu_v1_generated_Tpu_GetTensorFlowVersion_async
     */
    getTensorFlowVersion(request?: protos.google.cloud.tpu.v1.IGetTensorFlowVersionRequest, options?: CallOptions): Promise<[
        protos.google.cloud.tpu.v1.ITensorFlowVersion,
        protos.google.cloud.tpu.v1.IGetTensorFlowVersionRequest | undefined,
        {} | undefined
    ]>;
    getTensorFlowVersion(request: protos.google.cloud.tpu.v1.IGetTensorFlowVersionRequest, options: CallOptions, callback: Callback<protos.google.cloud.tpu.v1.ITensorFlowVersion, protos.google.cloud.tpu.v1.IGetTensorFlowVersionRequest | null | undefined, {} | null | undefined>): void;
    getTensorFlowVersion(request: protos.google.cloud.tpu.v1.IGetTensorFlowVersionRequest, callback: Callback<protos.google.cloud.tpu.v1.ITensorFlowVersion, protos.google.cloud.tpu.v1.IGetTensorFlowVersionRequest | null | undefined, {} | null | undefined>): void;
    /**
     * Gets AcceleratorType.
     *
     * @param {Object} request
     *   The request object that will be sent.
     * @param {string} request.name
     *   Required. The resource name.
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Promise} - The promise which resolves to an array.
     *   The first element of the array is an object representing {@link protos.google.cloud.tpu.v1.AcceleratorType|AcceleratorType}.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods | documentation }
     *   for more details and examples.
     * @example <caption>include:samples/generated/v1/tpu.get_accelerator_type.js</caption>
     * region_tag:tpu_v1_generated_Tpu_GetAcceleratorType_async
     */
    getAcceleratorType(request?: protos.google.cloud.tpu.v1.IGetAcceleratorTypeRequest, options?: CallOptions): Promise<[
        protos.google.cloud.tpu.v1.IAcceleratorType,
        protos.google.cloud.tpu.v1.IGetAcceleratorTypeRequest | undefined,
        {} | undefined
    ]>;
    getAcceleratorType(request: protos.google.cloud.tpu.v1.IGetAcceleratorTypeRequest, options: CallOptions, callback: Callback<protos.google.cloud.tpu.v1.IAcceleratorType, protos.google.cloud.tpu.v1.IGetAcceleratorTypeRequest | null | undefined, {} | null | undefined>): void;
    getAcceleratorType(request: protos.google.cloud.tpu.v1.IGetAcceleratorTypeRequest, callback: Callback<protos.google.cloud.tpu.v1.IAcceleratorType, protos.google.cloud.tpu.v1.IGetAcceleratorTypeRequest | null | undefined, {} | null | undefined>): void;
    /**
     * Creates a node.
     *
     * @param {Object} request
     *   The request object that will be sent.
     * @param {string} request.parent
     *   Required. The parent resource name.
     * @param {string} request.nodeId
     *   The unqualified resource name.
     * @param {google.cloud.tpu.v1.Node} request.node
     *   Required. The node.
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Promise} - The promise which resolves to an array.
     *   The first element of the array is an object representing
     *   a long running operation. Its `promise()` method returns a promise
     *   you can `await` for.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations | documentation }
     *   for more details and examples.
     * @example <caption>include:samples/generated/v1/tpu.create_node.js</caption>
     * region_tag:tpu_v1_generated_Tpu_CreateNode_async
     */
    createNode(request?: protos.google.cloud.tpu.v1.ICreateNodeRequest, options?: CallOptions): Promise<[
        LROperation<protos.google.cloud.tpu.v1.INode, protos.google.cloud.tpu.v1.IOperationMetadata>,
        protos.google.longrunning.IOperation | undefined,
        {} | undefined
    ]>;
    createNode(request: protos.google.cloud.tpu.v1.ICreateNodeRequest, options: CallOptions, callback: Callback<LROperation<protos.google.cloud.tpu.v1.INode, protos.google.cloud.tpu.v1.IOperationMetadata>, protos.google.longrunning.IOperation | null | undefined, {} | null | undefined>): void;
    createNode(request: protos.google.cloud.tpu.v1.ICreateNodeRequest, callback: Callback<LROperation<protos.google.cloud.tpu.v1.INode, protos.google.cloud.tpu.v1.IOperationMetadata>, protos.google.longrunning.IOperation | null | undefined, {} | null | undefined>): void;
    /**
     * Check the status of the long running operation returned by `createNode()`.
     * @param {String} name
     *   The operation name that will be passed.
     * @returns {Promise} - The promise which resolves to an object.
     *   The decoded operation object has result and metadata field to get information from.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations | documentation }
     *   for more details and examples.
     * @example <caption>include:samples/generated/v1/tpu.create_node.js</caption>
     * region_tag:tpu_v1_generated_Tpu_CreateNode_async
     */
    checkCreateNodeProgress(name: string): Promise<LROperation<protos.google.cloud.tpu.v1.Node, protos.google.cloud.tpu.v1.OperationMetadata>>;
    /**
     * Deletes a node.
     *
     * @param {Object} request
     *   The request object that will be sent.
     * @param {string} request.name
     *   Required. The resource name.
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Promise} - The promise which resolves to an array.
     *   The first element of the array is an object representing
     *   a long running operation. Its `promise()` method returns a promise
     *   you can `await` for.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations | documentation }
     *   for more details and examples.
     * @example <caption>include:samples/generated/v1/tpu.delete_node.js</caption>
     * region_tag:tpu_v1_generated_Tpu_DeleteNode_async
     */
    deleteNode(request?: protos.google.cloud.tpu.v1.IDeleteNodeRequest, options?: CallOptions): Promise<[
        LROperation<protos.google.cloud.tpu.v1.INode, protos.google.cloud.tpu.v1.IOperationMetadata>,
        protos.google.longrunning.IOperation | undefined,
        {} | undefined
    ]>;
    deleteNode(request: protos.google.cloud.tpu.v1.IDeleteNodeRequest, options: CallOptions, callback: Callback<LROperation<protos.google.cloud.tpu.v1.INode, protos.google.cloud.tpu.v1.IOperationMetadata>, protos.google.longrunning.IOperation | null | undefined, {} | null | undefined>): void;
    deleteNode(request: protos.google.cloud.tpu.v1.IDeleteNodeRequest, callback: Callback<LROperation<protos.google.cloud.tpu.v1.INode, protos.google.cloud.tpu.v1.IOperationMetadata>, protos.google.longrunning.IOperation | null | undefined, {} | null | undefined>): void;
    /**
     * Check the status of the long running operation returned by `deleteNode()`.
     * @param {String} name
     *   The operation name that will be passed.
     * @returns {Promise} - The promise which resolves to an object.
     *   The decoded operation object has result and metadata field to get information from.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations | documentation }
     *   for more details and examples.
     * @example <caption>include:samples/generated/v1/tpu.delete_node.js</caption>
     * region_tag:tpu_v1_generated_Tpu_DeleteNode_async
     */
    checkDeleteNodeProgress(name: string): Promise<LROperation<protos.google.cloud.tpu.v1.Node, protos.google.cloud.tpu.v1.OperationMetadata>>;
    /**
     * Reimages a node's OS.
     *
     * @param {Object} request
     *   The request object that will be sent.
     * @param {string} request.name
     *   The resource name.
     * @param {string} request.tensorflowVersion
     *   The version for reimage to create.
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Promise} - The promise which resolves to an array.
     *   The first element of the array is an object representing
     *   a long running operation. Its `promise()` method returns a promise
     *   you can `await` for.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations | documentation }
     *   for more details and examples.
     * @example <caption>include:samples/generated/v1/tpu.reimage_node.js</caption>
     * region_tag:tpu_v1_generated_Tpu_ReimageNode_async
     */
    reimageNode(request?: protos.google.cloud.tpu.v1.IReimageNodeRequest, options?: CallOptions): Promise<[
        LROperation<protos.google.cloud.tpu.v1.INode, protos.google.cloud.tpu.v1.IOperationMetadata>,
        protos.google.longrunning.IOperation | undefined,
        {} | undefined
    ]>;
    reimageNode(request: protos.google.cloud.tpu.v1.IReimageNodeRequest, options: CallOptions, callback: Callback<LROperation<protos.google.cloud.tpu.v1.INode, protos.google.cloud.tpu.v1.IOperationMetadata>, protos.google.longrunning.IOperation | null | undefined, {} | null | undefined>): void;
    reimageNode(request: protos.google.cloud.tpu.v1.IReimageNodeRequest, callback: Callback<LROperation<protos.google.cloud.tpu.v1.INode, protos.google.cloud.tpu.v1.IOperationMetadata>, protos.google.longrunning.IOperation | null | undefined, {} | null | undefined>): void;
    /**
     * Check the status of the long running operation returned by `reimageNode()`.
     * @param {String} name
     *   The operation name that will be passed.
     * @returns {Promise} - The promise which resolves to an object.
     *   The decoded operation object has result and metadata field to get information from.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations | documentation }
     *   for more details and examples.
     * @example <caption>include:samples/generated/v1/tpu.reimage_node.js</caption>
     * region_tag:tpu_v1_generated_Tpu_ReimageNode_async
     */
    checkReimageNodeProgress(name: string): Promise<LROperation<protos.google.cloud.tpu.v1.Node, protos.google.cloud.tpu.v1.OperationMetadata>>;
    /**
     * Stops a node, this operation is only available with single TPU nodes.
     *
     * @param {Object} request
     *   The request object that will be sent.
     * @param {string} request.name
     *   The resource name.
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Promise} - The promise which resolves to an array.
     *   The first element of the array is an object representing
     *   a long running operation. Its `promise()` method returns a promise
     *   you can `await` for.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations | documentation }
     *   for more details and examples.
     * @example <caption>include:samples/generated/v1/tpu.stop_node.js</caption>
     * region_tag:tpu_v1_generated_Tpu_StopNode_async
     */
    stopNode(request?: protos.google.cloud.tpu.v1.IStopNodeRequest, options?: CallOptions): Promise<[
        LROperation<protos.google.cloud.tpu.v1.INode, protos.google.cloud.tpu.v1.IOperationMetadata>,
        protos.google.longrunning.IOperation | undefined,
        {} | undefined
    ]>;
    stopNode(request: protos.google.cloud.tpu.v1.IStopNodeRequest, options: CallOptions, callback: Callback<LROperation<protos.google.cloud.tpu.v1.INode, protos.google.cloud.tpu.v1.IOperationMetadata>, protos.google.longrunning.IOperation | null | undefined, {} | null | undefined>): void;
    stopNode(request: protos.google.cloud.tpu.v1.IStopNodeRequest, callback: Callback<LROperation<protos.google.cloud.tpu.v1.INode, protos.google.cloud.tpu.v1.IOperationMetadata>, protos.google.longrunning.IOperation | null | undefined, {} | null | undefined>): void;
    /**
     * Check the status of the long running operation returned by `stopNode()`.
     * @param {String} name
     *   The operation name that will be passed.
     * @returns {Promise} - The promise which resolves to an object.
     *   The decoded operation object has result and metadata field to get information from.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations | documentation }
     *   for more details and examples.
     * @example <caption>include:samples/generated/v1/tpu.stop_node.js</caption>
     * region_tag:tpu_v1_generated_Tpu_StopNode_async
     */
    checkStopNodeProgress(name: string): Promise<LROperation<protos.google.cloud.tpu.v1.Node, protos.google.cloud.tpu.v1.OperationMetadata>>;
    /**
     * Starts a node.
     *
     * @param {Object} request
     *   The request object that will be sent.
     * @param {string} request.name
     *   The resource name.
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Promise} - The promise which resolves to an array.
     *   The first element of the array is an object representing
     *   a long running operation. Its `promise()` method returns a promise
     *   you can `await` for.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations | documentation }
     *   for more details and examples.
     * @example <caption>include:samples/generated/v1/tpu.start_node.js</caption>
     * region_tag:tpu_v1_generated_Tpu_StartNode_async
     */
    startNode(request?: protos.google.cloud.tpu.v1.IStartNodeRequest, options?: CallOptions): Promise<[
        LROperation<protos.google.cloud.tpu.v1.INode, protos.google.cloud.tpu.v1.IOperationMetadata>,
        protos.google.longrunning.IOperation | undefined,
        {} | undefined
    ]>;
    startNode(request: protos.google.cloud.tpu.v1.IStartNodeRequest, options: CallOptions, callback: Callback<LROperation<protos.google.cloud.tpu.v1.INode, protos.google.cloud.tpu.v1.IOperationMetadata>, protos.google.longrunning.IOperation | null | undefined, {} | null | undefined>): void;
    startNode(request: protos.google.cloud.tpu.v1.IStartNodeRequest, callback: Callback<LROperation<protos.google.cloud.tpu.v1.INode, protos.google.cloud.tpu.v1.IOperationMetadata>, protos.google.longrunning.IOperation | null | undefined, {} | null | undefined>): void;
    /**
     * Check the status of the long running operation returned by `startNode()`.
     * @param {String} name
     *   The operation name that will be passed.
     * @returns {Promise} - The promise which resolves to an object.
     *   The decoded operation object has result and metadata field to get information from.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations | documentation }
     *   for more details and examples.
     * @example <caption>include:samples/generated/v1/tpu.start_node.js</caption>
     * region_tag:tpu_v1_generated_Tpu_StartNode_async
     */
    checkStartNodeProgress(name: string): Promise<LROperation<protos.google.cloud.tpu.v1.Node, protos.google.cloud.tpu.v1.OperationMetadata>>;
    /**
     * Lists nodes.
     *
     * @param {Object} request
     *   The request object that will be sent.
     * @param {string} request.parent
     *   Required. The parent resource name.
     * @param {number} request.pageSize
     *   The maximum number of items to return.
     * @param {string} request.pageToken
     *   The next_page_token value returned from a previous List request, if any.
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Promise} - The promise which resolves to an array.
     *   The first element of the array is Array of {@link protos.google.cloud.tpu.v1.Node|Node}.
     *   The client library will perform auto-pagination by default: it will call the API as many
     *   times as needed and will merge results from all the pages into this array.
     *   Note that it can affect your quota.
     *   We recommend using `listNodesAsync()`
     *   method described below for async iteration which you can stop as needed.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
     *   for more details and examples.
     */
    listNodes(request?: protos.google.cloud.tpu.v1.IListNodesRequest, options?: CallOptions): Promise<[
        protos.google.cloud.tpu.v1.INode[],
        protos.google.cloud.tpu.v1.IListNodesRequest | null,
        protos.google.cloud.tpu.v1.IListNodesResponse
    ]>;
    listNodes(request: protos.google.cloud.tpu.v1.IListNodesRequest, options: CallOptions, callback: PaginationCallback<protos.google.cloud.tpu.v1.IListNodesRequest, protos.google.cloud.tpu.v1.IListNodesResponse | null | undefined, protos.google.cloud.tpu.v1.INode>): void;
    listNodes(request: protos.google.cloud.tpu.v1.IListNodesRequest, callback: PaginationCallback<protos.google.cloud.tpu.v1.IListNodesRequest, protos.google.cloud.tpu.v1.IListNodesResponse | null | undefined, protos.google.cloud.tpu.v1.INode>): void;
    /**
     * Equivalent to `method.name.toCamelCase()`, but returns a NodeJS Stream object.
     * @param {Object} request
     *   The request object that will be sent.
     * @param {string} request.parent
     *   Required. The parent resource name.
     * @param {number} request.pageSize
     *   The maximum number of items to return.
     * @param {string} request.pageToken
     *   The next_page_token value returned from a previous List request, if any.
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Stream}
     *   An object stream which emits an object representing {@link protos.google.cloud.tpu.v1.Node|Node} on 'data' event.
     *   The client library will perform auto-pagination by default: it will call the API as many
     *   times as needed. Note that it can affect your quota.
     *   We recommend using `listNodesAsync()`
     *   method described below for async iteration which you can stop as needed.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
     *   for more details and examples.
     */
    listNodesStream(request?: protos.google.cloud.tpu.v1.IListNodesRequest, options?: CallOptions): Transform;
    /**
     * Equivalent to `listNodes`, but returns an iterable object.
     *
     * `for`-`await`-`of` syntax is used with the iterable to get response elements on-demand.
     * @param {Object} request
     *   The request object that will be sent.
     * @param {string} request.parent
     *   Required. The parent resource name.
     * @param {number} request.pageSize
     *   The maximum number of items to return.
     * @param {string} request.pageToken
     *   The next_page_token value returned from a previous List request, if any.
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Object}
     *   An iterable Object that allows {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols | async iteration }.
     *   When you iterate the returned iterable, each element will be an object representing
     *   {@link protos.google.cloud.tpu.v1.Node|Node}. The API will be called under the hood as needed, once per the page,
     *   so you can stop the iteration when you don't need more results.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
     *   for more details and examples.
     * @example <caption>include:samples/generated/v1/tpu.list_nodes.js</caption>
     * region_tag:tpu_v1_generated_Tpu_ListNodes_async
     */
    listNodesAsync(request?: protos.google.cloud.tpu.v1.IListNodesRequest, options?: CallOptions): AsyncIterable<protos.google.cloud.tpu.v1.INode>;
    /**
     * List TensorFlow versions supported by this API.
     *
     * @param {Object} request
     *   The request object that will be sent.
     * @param {string} request.parent
     *   Required. The parent resource name.
     * @param {number} request.pageSize
     *   The maximum number of items to return.
     * @param {string} request.pageToken
     *   The next_page_token value returned from a previous List request, if any.
     * @param {string} request.filter
     *   List filter.
     * @param {string} request.orderBy
     *   Sort results.
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Promise} - The promise which resolves to an array.
     *   The first element of the array is Array of {@link protos.google.cloud.tpu.v1.TensorFlowVersion|TensorFlowVersion}.
     *   The client library will perform auto-pagination by default: it will call the API as many
     *   times as needed and will merge results from all the pages into this array.
     *   Note that it can affect your quota.
     *   We recommend using `listTensorFlowVersionsAsync()`
     *   method described below for async iteration which you can stop as needed.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
     *   for more details and examples.
     */
    listTensorFlowVersions(request?: protos.google.cloud.tpu.v1.IListTensorFlowVersionsRequest, options?: CallOptions): Promise<[
        protos.google.cloud.tpu.v1.ITensorFlowVersion[],
        protos.google.cloud.tpu.v1.IListTensorFlowVersionsRequest | null,
        protos.google.cloud.tpu.v1.IListTensorFlowVersionsResponse
    ]>;
    listTensorFlowVersions(request: protos.google.cloud.tpu.v1.IListTensorFlowVersionsRequest, options: CallOptions, callback: PaginationCallback<protos.google.cloud.tpu.v1.IListTensorFlowVersionsRequest, protos.google.cloud.tpu.v1.IListTensorFlowVersionsResponse | null | undefined, protos.google.cloud.tpu.v1.ITensorFlowVersion>): void;
    listTensorFlowVersions(request: protos.google.cloud.tpu.v1.IListTensorFlowVersionsRequest, callback: PaginationCallback<protos.google.cloud.tpu.v1.IListTensorFlowVersionsRequest, protos.google.cloud.tpu.v1.IListTensorFlowVersionsResponse | null | undefined, protos.google.cloud.tpu.v1.ITensorFlowVersion>): void;
    /**
     * Equivalent to `method.name.toCamelCase()`, but returns a NodeJS Stream object.
     * @param {Object} request
     *   The request object that will be sent.
     * @param {string} request.parent
     *   Required. The parent resource name.
     * @param {number} request.pageSize
     *   The maximum number of items to return.
     * @param {string} request.pageToken
     *   The next_page_token value returned from a previous List request, if any.
     * @param {string} request.filter
     *   List filter.
     * @param {string} request.orderBy
     *   Sort results.
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Stream}
     *   An object stream which emits an object representing {@link protos.google.cloud.tpu.v1.TensorFlowVersion|TensorFlowVersion} on 'data' event.
     *   The client library will perform auto-pagination by default: it will call the API as many
     *   times as needed. Note that it can affect your quota.
     *   We recommend using `listTensorFlowVersionsAsync()`
     *   method described below for async iteration which you can stop as needed.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
     *   for more details and examples.
     */
    listTensorFlowVersionsStream(request?: protos.google.cloud.tpu.v1.IListTensorFlowVersionsRequest, options?: CallOptions): Transform;
    /**
     * Equivalent to `listTensorFlowVersions`, but returns an iterable object.
     *
     * `for`-`await`-`of` syntax is used with the iterable to get response elements on-demand.
     * @param {Object} request
     *   The request object that will be sent.
     * @param {string} request.parent
     *   Required. The parent resource name.
     * @param {number} request.pageSize
     *   The maximum number of items to return.
     * @param {string} request.pageToken
     *   The next_page_token value returned from a previous List request, if any.
     * @param {string} request.filter
     *   List filter.
     * @param {string} request.orderBy
     *   Sort results.
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Object}
     *   An iterable Object that allows {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols | async iteration }.
     *   When you iterate the returned iterable, each element will be an object representing
     *   {@link protos.google.cloud.tpu.v1.TensorFlowVersion|TensorFlowVersion}. The API will be called under the hood as needed, once per the page,
     *   so you can stop the iteration when you don't need more results.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
     *   for more details and examples.
     * @example <caption>include:samples/generated/v1/tpu.list_tensor_flow_versions.js</caption>
     * region_tag:tpu_v1_generated_Tpu_ListTensorFlowVersions_async
     */
    listTensorFlowVersionsAsync(request?: protos.google.cloud.tpu.v1.IListTensorFlowVersionsRequest, options?: CallOptions): AsyncIterable<protos.google.cloud.tpu.v1.ITensorFlowVersion>;
    /**
     * Lists accelerator types supported by this API.
     *
     * @param {Object} request
     *   The request object that will be sent.
     * @param {string} request.parent
     *   Required. The parent resource name.
     * @param {number} request.pageSize
     *   The maximum number of items to return.
     * @param {string} request.pageToken
     *   The next_page_token value returned from a previous List request, if any.
     * @param {string} request.filter
     *   List filter.
     * @param {string} request.orderBy
     *   Sort results.
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Promise} - The promise which resolves to an array.
     *   The first element of the array is Array of {@link protos.google.cloud.tpu.v1.AcceleratorType|AcceleratorType}.
     *   The client library will perform auto-pagination by default: it will call the API as many
     *   times as needed and will merge results from all the pages into this array.
     *   Note that it can affect your quota.
     *   We recommend using `listAcceleratorTypesAsync()`
     *   method described below for async iteration which you can stop as needed.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
     *   for more details and examples.
     */
    listAcceleratorTypes(request?: protos.google.cloud.tpu.v1.IListAcceleratorTypesRequest, options?: CallOptions): Promise<[
        protos.google.cloud.tpu.v1.IAcceleratorType[],
        protos.google.cloud.tpu.v1.IListAcceleratorTypesRequest | null,
        protos.google.cloud.tpu.v1.IListAcceleratorTypesResponse
    ]>;
    listAcceleratorTypes(request: protos.google.cloud.tpu.v1.IListAcceleratorTypesRequest, options: CallOptions, callback: PaginationCallback<protos.google.cloud.tpu.v1.IListAcceleratorTypesRequest, protos.google.cloud.tpu.v1.IListAcceleratorTypesResponse | null | undefined, protos.google.cloud.tpu.v1.IAcceleratorType>): void;
    listAcceleratorTypes(request: protos.google.cloud.tpu.v1.IListAcceleratorTypesRequest, callback: PaginationCallback<protos.google.cloud.tpu.v1.IListAcceleratorTypesRequest, protos.google.cloud.tpu.v1.IListAcceleratorTypesResponse | null | undefined, protos.google.cloud.tpu.v1.IAcceleratorType>): void;
    /**
     * Equivalent to `method.name.toCamelCase()`, but returns a NodeJS Stream object.
     * @param {Object} request
     *   The request object that will be sent.
     * @param {string} request.parent
     *   Required. The parent resource name.
     * @param {number} request.pageSize
     *   The maximum number of items to return.
     * @param {string} request.pageToken
     *   The next_page_token value returned from a previous List request, if any.
     * @param {string} request.filter
     *   List filter.
     * @param {string} request.orderBy
     *   Sort results.
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Stream}
     *   An object stream which emits an object representing {@link protos.google.cloud.tpu.v1.AcceleratorType|AcceleratorType} on 'data' event.
     *   The client library will perform auto-pagination by default: it will call the API as many
     *   times as needed. Note that it can affect your quota.
     *   We recommend using `listAcceleratorTypesAsync()`
     *   method described below for async iteration which you can stop as needed.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
     *   for more details and examples.
     */
    listAcceleratorTypesStream(request?: protos.google.cloud.tpu.v1.IListAcceleratorTypesRequest, options?: CallOptions): Transform;
    /**
     * Equivalent to `listAcceleratorTypes`, but returns an iterable object.
     *
     * `for`-`await`-`of` syntax is used with the iterable to get response elements on-demand.
     * @param {Object} request
     *   The request object that will be sent.
     * @param {string} request.parent
     *   Required. The parent resource name.
     * @param {number} request.pageSize
     *   The maximum number of items to return.
     * @param {string} request.pageToken
     *   The next_page_token value returned from a previous List request, if any.
     * @param {string} request.filter
     *   List filter.
     * @param {string} request.orderBy
     *   Sort results.
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Object}
     *   An iterable Object that allows {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols | async iteration }.
     *   When you iterate the returned iterable, each element will be an object representing
     *   {@link protos.google.cloud.tpu.v1.AcceleratorType|AcceleratorType}. The API will be called under the hood as needed, once per the page,
     *   so you can stop the iteration when you don't need more results.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
     *   for more details and examples.
     * @example <caption>include:samples/generated/v1/tpu.list_accelerator_types.js</caption>
     * region_tag:tpu_v1_generated_Tpu_ListAcceleratorTypes_async
     */
    listAcceleratorTypesAsync(request?: protos.google.cloud.tpu.v1.IListAcceleratorTypesRequest, options?: CallOptions): AsyncIterable<protos.google.cloud.tpu.v1.IAcceleratorType>;
    /**
     * Gets information about a location.
     *
     * @param {Object} request
     *   The request object that will be sent.
     * @param {string} request.name
     *   Resource name for the location.
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html | CallOptions} for more details.
     * @returns {Promise} - The promise which resolves to an array.
     *   The first element of the array is an object representing {@link google.cloud.location.Location | Location}.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods | documentation }
     *   for more details and examples.
     * @example
     * ```
     * const [response] = await client.getLocation(request);
     * ```
     */
    getLocation(request: LocationProtos.google.cloud.location.IGetLocationRequest, options?: gax.CallOptions | Callback<LocationProtos.google.cloud.location.ILocation, LocationProtos.google.cloud.location.IGetLocationRequest | null | undefined, {} | null | undefined>, callback?: Callback<LocationProtos.google.cloud.location.ILocation, LocationProtos.google.cloud.location.IGetLocationRequest | null | undefined, {} | null | undefined>): Promise<LocationProtos.google.cloud.location.ILocation>;
    /**
     * Lists information about the supported locations for this service. Returns an iterable object.
     *
     * `for`-`await`-`of` syntax is used with the iterable to get response elements on-demand.
     * @param {Object} request
     *   The request object that will be sent.
     * @param {string} request.name
     *   The resource that owns the locations collection, if applicable.
     * @param {string} request.filter
     *   The standard list filter.
     * @param {number} request.pageSize
     *   The standard list page size.
     * @param {string} request.pageToken
     *   The standard list page token.
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Object}
     *   An iterable Object that allows {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols | async iteration }.
     *   When you iterate the returned iterable, each element will be an object representing
     *   {@link google.cloud.location.Location | Location}. The API will be called under the hood as needed, once per the page,
     *   so you can stop the iteration when you don't need more results.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
     *   for more details and examples.
     * @example
     * ```
     * const iterable = client.listLocationsAsync(request);
     * for await (const response of iterable) {
     *   // process response
     * }
     * ```
     */
    listLocationsAsync(request: LocationProtos.google.cloud.location.IListLocationsRequest, options?: CallOptions): AsyncIterable<LocationProtos.google.cloud.location.ILocation>;
    /**
     * Gets the latest state of a long-running operation.  Clients can use this
     * method to poll the operation result at intervals as recommended by the API
     * service.
     *
     * @param {Object} request - The request object that will be sent.
     * @param {string} request.name - The name of the operation resource.
     * @param {Object=} options
     *   Optional parameters. You can override the default settings for this call,
     *   e.g, timeout, retries, paginations, etc. See {@link
     *   https://googleapis.github.io/gax-nodejs/global.html#CallOptions | gax.CallOptions}
     *   for the details.
     * @param {function(?Error, ?Object)=} callback
     *   The function which will be called with the result of the API call.
     *
     *   The second parameter to the callback is an object representing
     *   {@link google.longrunning.Operation | google.longrunning.Operation}.
     * @return {Promise} - The promise which resolves to an array.
     *   The first element of the array is an object representing
     * {@link google.longrunning.Operation | google.longrunning.Operation}.
     * The promise has a method named "cancel" which cancels the ongoing API call.
     *
     * @example
     * ```
     * const client = longrunning.operationsClient();
     * const name = '';
     * const [response] = await client.getOperation({name});
     * // doThingsWith(response)
     * ```
     */
    getOperation(request: protos.google.longrunning.GetOperationRequest, options?: gax.CallOptions | Callback<protos.google.longrunning.Operation, protos.google.longrunning.GetOperationRequest, {} | null | undefined>, callback?: Callback<protos.google.longrunning.Operation, protos.google.longrunning.GetOperationRequest, {} | null | undefined>): Promise<[protos.google.longrunning.Operation]>;
    /**
     * Lists operations that match the specified filter in the request. If the
     * server doesn't support this method, it returns `UNIMPLEMENTED`. Returns an iterable object.
     *
     * For-await-of syntax is used with the iterable to recursively get response element on-demand.
     *
     * @param {Object} request - The request object that will be sent.
     * @param {string} request.name - The name of the operation collection.
     * @param {string} request.filter - The standard list filter.
     * @param {number=} request.pageSize -
     *   The maximum number of resources contained in the underlying API
     *   response. If page streaming is performed per-resource, this
     *   parameter does not affect the return value. If page streaming is
     *   performed per-page, this determines the maximum number of
     *   resources in a page.
     * @param {Object=} options
     *   Optional parameters. You can override the default settings for this call,
     *   e.g, timeout, retries, paginations, etc. See {@link
     *   https://googleapis.github.io/gax-nodejs/global.html#CallOptions | gax.CallOptions} for the
     *   details.
     * @returns {Object}
     *   An iterable Object that conforms to {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols | iteration protocols}.
     *
     * @example
     * ```
     * const client = longrunning.operationsClient();
     * for await (const response of client.listOperationsAsync(request));
     * // doThingsWith(response)
     * ```
     */
    listOperationsAsync(request: protos.google.longrunning.ListOperationsRequest, options?: gax.CallOptions): AsyncIterable<protos.google.longrunning.ListOperationsResponse>;
    /**
     * Starts asynchronous cancellation on a long-running operation.  The server
     * makes a best effort to cancel the operation, but success is not
     * guaranteed.  If the server doesn't support this method, it returns
     * `google.rpc.Code.UNIMPLEMENTED`.  Clients can use
     * {@link Operations.GetOperation} or
     * other methods to check whether the cancellation succeeded or whether the
     * operation completed despite cancellation. On successful cancellation,
     * the operation is not deleted; instead, it becomes an operation with
     * an {@link Operation.error} value with a {@link google.rpc.Status.code} of
     * 1, corresponding to `Code.CANCELLED`.
     *
     * @param {Object} request - The request object that will be sent.
     * @param {string} request.name - The name of the operation resource to be cancelled.
     * @param {Object=} options
     *   Optional parameters. You can override the default settings for this call,
     * e.g, timeout, retries, paginations, etc. See {@link
     * https://googleapis.github.io/gax-nodejs/global.html#CallOptions | gax.CallOptions} for the
     * details.
     * @param {function(?Error)=} callback
     *   The function which will be called with the result of the API call.
     * @return {Promise} - The promise which resolves when API call finishes.
     *   The promise has a method named "cancel" which cancels the ongoing API
     * call.
     *
     * @example
     * ```
     * const client = longrunning.operationsClient();
     * await client.cancelOperation({name: ''});
     * ```
     */
    cancelOperation(request: protos.google.longrunning.CancelOperationRequest, options?: gax.CallOptions | Callback<protos.google.protobuf.Empty, protos.google.longrunning.CancelOperationRequest, {} | undefined | null>, callback?: Callback<protos.google.longrunning.CancelOperationRequest, protos.google.protobuf.Empty, {} | undefined | null>): Promise<protos.google.protobuf.Empty>;
    /**
     * Deletes a long-running operation. This method indicates that the client is
     * no longer interested in the operation result. It does not cancel the
     * operation. If the server doesn't support this method, it returns
     * `google.rpc.Code.UNIMPLEMENTED`.
     *
     * @param {Object} request - The request object that will be sent.
     * @param {string} request.name - The name of the operation resource to be deleted.
     * @param {Object=} options
     *   Optional parameters. You can override the default settings for this call,
     * e.g, timeout, retries, paginations, etc. See {@link
     * https://googleapis.github.io/gax-nodejs/global.html#CallOptions | gax.CallOptions}
     * for the details.
     * @param {function(?Error)=} callback
     *   The function which will be called with the result of the API call.
     * @return {Promise} - The promise which resolves when API call finishes.
     *   The promise has a method named "cancel" which cancels the ongoing API
     * call.
     *
     * @example
     * ```
     * const client = longrunning.operationsClient();
     * await client.deleteOperation({name: ''});
     * ```
     */
    deleteOperation(request: protos.google.longrunning.DeleteOperationRequest, options?: gax.CallOptions | Callback<protos.google.protobuf.Empty, protos.google.longrunning.DeleteOperationRequest, {} | null | undefined>, callback?: Callback<protos.google.protobuf.Empty, protos.google.longrunning.DeleteOperationRequest, {} | null | undefined>): Promise<protos.google.protobuf.Empty>;
    /**
     * Return a fully-qualified acceleratorType resource name string.
     *
     * @param {string} project
     * @param {string} location
     * @param {string} accelerator_type
     * @returns {string} Resource name string.
     */
    acceleratorTypePath(project: string, location: string, acceleratorType: string): string;
    /**
     * Parse the project from AcceleratorType resource.
     *
     * @param {string} acceleratorTypeName
     *   A fully-qualified path representing AcceleratorType resource.
     * @returns {string} A string representing the project.
     */
    matchProjectFromAcceleratorTypeName(acceleratorTypeName: string): string | number;
    /**
     * Parse the location from AcceleratorType resource.
     *
     * @param {string} acceleratorTypeName
     *   A fully-qualified path representing AcceleratorType resource.
     * @returns {string} A string representing the location.
     */
    matchLocationFromAcceleratorTypeName(acceleratorTypeName: string): string | number;
    /**
     * Parse the accelerator_type from AcceleratorType resource.
     *
     * @param {string} acceleratorTypeName
     *   A fully-qualified path representing AcceleratorType resource.
     * @returns {string} A string representing the accelerator_type.
     */
    matchAcceleratorTypeFromAcceleratorTypeName(acceleratorTypeName: string): string | number;
    /**
     * Return a fully-qualified location resource name string.
     *
     * @param {string} project
     * @param {string} location
     * @returns {string} Resource name string.
     */
    locationPath(project: string, location: string): string;
    /**
     * Parse the project from Location resource.
     *
     * @param {string} locationName
     *   A fully-qualified path representing Location resource.
     * @returns {string} A string representing the project.
     */
    matchProjectFromLocationName(locationName: string): string | number;
    /**
     * Parse the location from Location resource.
     *
     * @param {string} locationName
     *   A fully-qualified path representing Location resource.
     * @returns {string} A string representing the location.
     */
    matchLocationFromLocationName(locationName: string): string | number;
    /**
     * Return a fully-qualified node resource name string.
     *
     * @param {string} project
     * @param {string} location
     * @param {string} node
     * @returns {string} Resource name string.
     */
    nodePath(project: string, location: string, node: string): string;
    /**
     * Parse the project from Node resource.
     *
     * @param {string} nodeName
     *   A fully-qualified path representing Node resource.
     * @returns {string} A string representing the project.
     */
    matchProjectFromNodeName(nodeName: string): string | number;
    /**
     * Parse the location from Node resource.
     *
     * @param {string} nodeName
     *   A fully-qualified path representing Node resource.
     * @returns {string} A string representing the location.
     */
    matchLocationFromNodeName(nodeName: string): string | number;
    /**
     * Parse the node from Node resource.
     *
     * @param {string} nodeName
     *   A fully-qualified path representing Node resource.
     * @returns {string} A string representing the node.
     */
    matchNodeFromNodeName(nodeName: string): string | number;
    /**
     * Return a fully-qualified project resource name string.
     *
     * @param {string} project
     * @returns {string} Resource name string.
     */
    projectPath(project: string): string;
    /**
     * Parse the project from Project resource.
     *
     * @param {string} projectName
     *   A fully-qualified path representing Project resource.
     * @returns {string} A string representing the project.
     */
    matchProjectFromProjectName(projectName: string): string | number;
    /**
     * Return a fully-qualified tensorFlowVersion resource name string.
     *
     * @param {string} project
     * @param {string} location
     * @param {string} tensor_flow_version
     * @returns {string} Resource name string.
     */
    tensorFlowVersionPath(project: string, location: string, tensorFlowVersion: string): string;
    /**
     * Parse the project from TensorFlowVersion resource.
     *
     * @param {string} tensorFlowVersionName
     *   A fully-qualified path representing TensorFlowVersion resource.
     * @returns {string} A string representing the project.
     */
    matchProjectFromTensorFlowVersionName(tensorFlowVersionName: string): string | number;
    /**
     * Parse the location from TensorFlowVersion resource.
     *
     * @param {string} tensorFlowVersionName
     *   A fully-qualified path representing TensorFlowVersion resource.
     * @returns {string} A string representing the location.
     */
    matchLocationFromTensorFlowVersionName(tensorFlowVersionName: string): string | number;
    /**
     * Parse the tensor_flow_version from TensorFlowVersion resource.
     *
     * @param {string} tensorFlowVersionName
     *   A fully-qualified path representing TensorFlowVersion resource.
     * @returns {string} A string representing the tensor_flow_version.
     */
    matchTensorFlowVersionFromTensorFlowVersionName(tensorFlowVersionName: string): string | number;
    /**
     * Terminate the gRPC channel and close the client.
     *
     * The client will no longer be usable and all future behavior is undefined.
     * @returns {Promise} A promise that resolves when the client is closed.
     */
    close(): Promise<void>;
}
