import type * as gax from 'google-gax';
import type { Callback, CallOptions, Descriptors, ClientOptions, LROperation, PaginationCallback } from 'google-gax';
import { Transform } from 'stream';
import * as protos from '../../protos/protos';
/**
 *  The GKE Hub service handles the registration of many Kubernetes clusters to
 *  Google Cloud, and the management of multi-cluster features over those
 *  clusters.
 *
 *  The GKE Hub service operates on the following resources:
 *
 *  * {@link protos.google.cloud.gkehub.v1.Membership|Membership}
 *  * {@link protos.google.cloud.gkehub.v1.Feature|Feature}
 *
 *  GKE Hub is currently available in the global region and all regions in
 *  https://cloud.google.com/compute/docs/regions-zones. Feature is only
 *  available in global region while membership is global region and all the
 *  regions.
 *
 *  **Membership management may be non-trivial:** it is recommended to use one
 *  of the Google-provided client libraries or tools where possible when working
 *  with Membership resources.
 * @class
 * @memberof v1
 */
export declare class GkeHubClient {
    private _terminated;
    private _opts;
    private _providedCustomServicePath;
    private _gaxModule;
    private _gaxGrpc;
    private _protos;
    private _defaults;
    private _universeDomain;
    private _servicePath;
    auth: gax.GoogleAuth;
    descriptors: Descriptors;
    warn: (code: string, message: string, warnType?: string) => void;
    innerApiCalls: {
        [name: string]: Function;
    };
    pathTemplates: {
        [name: string]: gax.PathTemplate;
    };
    operationsClient: gax.OperationsClient;
    gkeHubStub?: Promise<{
        [name: string]: Function;
    }>;
    /**
     * Construct an instance of GkeHubClient.
     *
     * @param {object} [options] - The configuration object.
     * The options accepted by the constructor are described in detail
     * in [this document](https://github.com/googleapis/gax-nodejs/blob/main/client-libraries.md#creating-the-client-instance).
     * The common options are:
     * @param {object} [options.credentials] - Credentials object.
     * @param {string} [options.credentials.client_email]
     * @param {string} [options.credentials.private_key]
     * @param {string} [options.email] - Account email address. Required when
     *     using a .pem or .p12 keyFilename.
     * @param {string} [options.keyFilename] - Full path to the a .json, .pem, or
     *     .p12 key downloaded from the Google Developers Console. If you provide
     *     a path to a JSON file, the projectId option below is not necessary.
     *     NOTE: .pem and .p12 require you to specify options.email as well.
     * @param {number} [options.port] - The port on which to connect to
     *     the remote host.
     * @param {string} [options.projectId] - The project ID from the Google
     *     Developer's Console, e.g. 'grape-spaceship-123'. We will also check
     *     the environment variable GCLOUD_PROJECT for your project ID. If your
     *     app is running in an environment which supports
     *     {@link https://developers.google.com/identity/protocols/application-default-credentials Application Default Credentials},
     *     your project ID will be detected automatically.
     * @param {string} [options.apiEndpoint] - The domain name of the
     *     API remote host.
     * @param {gax.ClientConfig} [options.clientConfig] - Client configuration override.
     *     Follows the structure of {@link gapicConfig}.
     * @param {boolean} [options.fallback] - Use HTTP/1.1 REST mode.
     *     For more information, please check the
     *     {@link https://github.com/googleapis/gax-nodejs/blob/main/client-libraries.md#http11-rest-api-mode documentation}.
     * @param {gax} [gaxInstance]: loaded instance of `google-gax`. Useful if you
     *     need to avoid loading the default gRPC version and want to use the fallback
     *     HTTP implementation. Load only fallback version and pass it to the constructor:
     *     ```
     *     const gax = require('google-gax/build/src/fallback'); // avoids loading google-gax with gRPC
     *     const client = new GkeHubClient({fallback: true}, gax);
     *     ```
     */
    constructor(opts?: ClientOptions, gaxInstance?: typeof gax | typeof gax.fallback);
    /**
     * Initialize the client.
     * Performs asynchronous operations (such as authentication) and prepares the client.
     * This function will be called automatically when any class method is called for the
     * first time, but if you need to initialize it before calling an actual method,
     * feel free to call initialize() directly.
     *
     * You can await on this method if you want to make sure the client is initialized.
     *
     * @returns {Promise} A promise that resolves to an authenticated service stub.
     */
    initialize(): Promise<{
        [name: string]: Function;
    }>;
    /**
     * The DNS address for this API service.
     * @deprecated Use the apiEndpoint method of the client instance.
     * @returns {string} The DNS address for this service.
     */
    static get servicePath(): string;
    /**
     * The DNS address for this API service - same as servicePath.
     * @deprecated Use the apiEndpoint method of the client instance.
     * @returns {string} The DNS address for this service.
     */
    static get apiEndpoint(): string;
    /**
     * The DNS address for this API service.
     * @returns {string} The DNS address for this service.
     */
    get apiEndpoint(): string;
    get universeDomain(): string;
    /**
     * The port for this API service.
     * @returns {number} The default port for this service.
     */
    static get port(): number;
    /**
     * The scopes needed to make gRPC calls for every method defined
     * in this service.
     * @returns {string[]} List of default scopes.
     */
    static get scopes(): string[];
    getProjectId(): Promise<string>;
    getProjectId(callback: Callback<string, undefined, undefined>): void;
    /**
     * Gets the details of a Membership.
     *
     * @param {Object} request
     *   The request object that will be sent.
     * @param {string} request.name
     *   Required. The Membership resource name in the format
     *   `projects/* /locations/* /memberships/*`.
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Promise} - The promise which resolves to an array.
     *   The first element of the array is an object representing {@link protos.google.cloud.gkehub.v1.Membership|Membership}.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods | documentation }
     *   for more details and examples.
     * @example <caption>include:samples/generated/v1/gke_hub.get_membership.js</caption>
     * region_tag:gkehub_v1_generated_GkeHub_GetMembership_async
     */
    getMembership(request?: protos.google.cloud.gkehub.v1.IGetMembershipRequest, options?: CallOptions): Promise<[
        protos.google.cloud.gkehub.v1.IMembership,
        protos.google.cloud.gkehub.v1.IGetMembershipRequest | undefined,
        {} | undefined
    ]>;
    getMembership(request: protos.google.cloud.gkehub.v1.IGetMembershipRequest, options: CallOptions, callback: Callback<protos.google.cloud.gkehub.v1.IMembership, protos.google.cloud.gkehub.v1.IGetMembershipRequest | null | undefined, {} | null | undefined>): void;
    getMembership(request: protos.google.cloud.gkehub.v1.IGetMembershipRequest, callback: Callback<protos.google.cloud.gkehub.v1.IMembership, protos.google.cloud.gkehub.v1.IGetMembershipRequest | null | undefined, {} | null | undefined>): void;
    /**
     * Gets details of a single Feature.
     *
     * @param {Object} request
     *   The request object that will be sent.
     * @param {string} request.name
     *   Required. The Feature resource name in the format
     *   `projects/* /locations/* /features/*`
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Promise} - The promise which resolves to an array.
     *   The first element of the array is an object representing {@link protos.google.cloud.gkehub.v1.Feature|Feature}.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods | documentation }
     *   for more details and examples.
     * @example <caption>include:samples/generated/v1/gke_hub.get_feature.js</caption>
     * region_tag:gkehub_v1_generated_GkeHub_GetFeature_async
     */
    getFeature(request?: protos.google.cloud.gkehub.v1.IGetFeatureRequest, options?: CallOptions): Promise<[
        protos.google.cloud.gkehub.v1.IFeature,
        protos.google.cloud.gkehub.v1.IGetFeatureRequest | undefined,
        {} | undefined
    ]>;
    getFeature(request: protos.google.cloud.gkehub.v1.IGetFeatureRequest, options: CallOptions, callback: Callback<protos.google.cloud.gkehub.v1.IFeature, protos.google.cloud.gkehub.v1.IGetFeatureRequest | null | undefined, {} | null | undefined>): void;
    getFeature(request: protos.google.cloud.gkehub.v1.IGetFeatureRequest, callback: Callback<protos.google.cloud.gkehub.v1.IFeature, protos.google.cloud.gkehub.v1.IGetFeatureRequest | null | undefined, {} | null | undefined>): void;
    /**
     * Generates the manifest for deployment of the GKE connect agent.
     *
     * **This method is used internally by Google-provided libraries.**
     * Most clients should not need to call this method directly.
     *
     * @param {Object} request
     *   The request object that will be sent.
     * @param {string} request.name
     *   Required. The Membership resource name the Agent will associate with, in
     *   the format `projects/* /locations/* /memberships/*`.
     * @param {string} [request.namespace]
     *   Optional. Namespace for GKE Connect agent resources. Defaults to
     *   `gke-connect`.
     *
     *   The Connect Agent is authorized automatically when run in the default
     *   namespace. Otherwise, explicit authorization must be granted with an
     *   additional IAM binding.
     * @param {Buffer} [request.proxy]
     *   Optional. URI of a proxy if connectivity from the agent to
     *   gkeconnect.googleapis.com requires the use of a proxy. Format must be in
     *   the form `http(s)://{proxy_address}`, depending on the HTTP/HTTPS protocol
     *   supported by the proxy. This will direct the connect agent's outbound
     *   traffic through a HTTP(S) proxy.
     * @param {string} [request.version]
     *   Optional. The Connect agent version to use. Defaults to the most current
     *   version.
     * @param {boolean} [request.isUpgrade]
     *   Optional. If true, generate the resources for upgrade only. Some resources
     *   generated only for installation (e.g. secrets) will be excluded.
     * @param {string} [request.registry]
     *   Optional. The registry to fetch the connect agent image from. Defaults to
     *   gcr.io/gkeconnect.
     * @param {Buffer} [request.imagePullSecretContent]
     *   Optional. The image pull secret content for the registry, if not public.
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Promise} - The promise which resolves to an array.
     *   The first element of the array is an object representing {@link protos.google.cloud.gkehub.v1.GenerateConnectManifestResponse|GenerateConnectManifestResponse}.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods | documentation }
     *   for more details and examples.
     * @example <caption>include:samples/generated/v1/gke_hub.generate_connect_manifest.js</caption>
     * region_tag:gkehub_v1_generated_GkeHub_GenerateConnectManifest_async
     */
    generateConnectManifest(request?: protos.google.cloud.gkehub.v1.IGenerateConnectManifestRequest, options?: CallOptions): Promise<[
        protos.google.cloud.gkehub.v1.IGenerateConnectManifestResponse,
        protos.google.cloud.gkehub.v1.IGenerateConnectManifestRequest | undefined,
        {} | undefined
    ]>;
    generateConnectManifest(request: protos.google.cloud.gkehub.v1.IGenerateConnectManifestRequest, options: CallOptions, callback: Callback<protos.google.cloud.gkehub.v1.IGenerateConnectManifestResponse, protos.google.cloud.gkehub.v1.IGenerateConnectManifestRequest | null | undefined, {} | null | undefined>): void;
    generateConnectManifest(request: protos.google.cloud.gkehub.v1.IGenerateConnectManifestRequest, callback: Callback<protos.google.cloud.gkehub.v1.IGenerateConnectManifestResponse, protos.google.cloud.gkehub.v1.IGenerateConnectManifestRequest | null | undefined, {} | null | undefined>): void;
    /**
     * Creates a new Membership.
     *
     * **This is currently only supported for GKE clusters on Google Cloud**.
     * To register other clusters, follow the instructions at
     * https://cloud.google.com/anthos/multicluster-management/connect/registering-a-cluster.
     *
     * @param {Object} request
     *   The request object that will be sent.
     * @param {string} request.parent
     *   Required. The parent (project and location) where the Memberships will be
     *   created. Specified in the format `projects/* /locations/*`.
     * @param {string} request.membershipId
     *   Required. Client chosen ID for the membership. `membership_id` must be a
     *   valid RFC 1123 compliant DNS label:
     *
     *     1. At most 63 characters in length
     *     2. It must consist of lower case alphanumeric characters or `-`
     *     3. It must start and end with an alphanumeric character
     *
     *   Which can be expressed as the regex: `[a-z0-9]([-a-z0-9]*[a-z0-9])?`,
     *   with a maximum length of 63 characters.
     * @param {google.cloud.gkehub.v1.Membership} request.resource
     *   Required. The membership to create.
     * @param {string} [request.requestId]
     *   Optional. A request ID to identify requests. Specify a unique request ID
     *   so that if you must retry your request, the server will know to ignore
     *   the request if it has already been completed. The server will guarantee
     *   that for at least 60 minutes after the first request.
     *
     *   For example, consider a situation where you make an initial request and
     *   the request times out. If you make the request again with the same request
     *   ID, the server can check if original operation with the same request ID
     *   was received, and if so, will ignore the second request. This prevents
     *   clients from accidentally creating duplicate commitments.
     *
     *   The request ID must be a valid UUID with the exception that zero UUID is
     *   not supported (00000000-0000-0000-0000-000000000000).
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Promise} - The promise which resolves to an array.
     *   The first element of the array is an object representing
     *   a long running operation. Its `promise()` method returns a promise
     *   you can `await` for.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations | documentation }
     *   for more details and examples.
     * @example <caption>include:samples/generated/v1/gke_hub.create_membership.js</caption>
     * region_tag:gkehub_v1_generated_GkeHub_CreateMembership_async
     */
    createMembership(request?: protos.google.cloud.gkehub.v1.ICreateMembershipRequest, options?: CallOptions): Promise<[
        LROperation<protos.google.cloud.gkehub.v1.IMembership, protos.google.cloud.gkehub.v1.IOperationMetadata>,
        protos.google.longrunning.IOperation | undefined,
        {} | undefined
    ]>;
    createMembership(request: protos.google.cloud.gkehub.v1.ICreateMembershipRequest, options: CallOptions, callback: Callback<LROperation<protos.google.cloud.gkehub.v1.IMembership, protos.google.cloud.gkehub.v1.IOperationMetadata>, protos.google.longrunning.IOperation | null | undefined, {} | null | undefined>): void;
    createMembership(request: protos.google.cloud.gkehub.v1.ICreateMembershipRequest, callback: Callback<LROperation<protos.google.cloud.gkehub.v1.IMembership, protos.google.cloud.gkehub.v1.IOperationMetadata>, protos.google.longrunning.IOperation | null | undefined, {} | null | undefined>): void;
    /**
     * Check the status of the long running operation returned by `createMembership()`.
     * @param {String} name
     *   The operation name that will be passed.
     * @returns {Promise} - The promise which resolves to an object.
     *   The decoded operation object has result and metadata field to get information from.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations | documentation }
     *   for more details and examples.
     * @example <caption>include:samples/generated/v1/gke_hub.create_membership.js</caption>
     * region_tag:gkehub_v1_generated_GkeHub_CreateMembership_async
     */
    checkCreateMembershipProgress(name: string): Promise<LROperation<protos.google.cloud.gkehub.v1.Membership, protos.google.cloud.gkehub.v1.OperationMetadata>>;
    /**
     * Adds a new Feature.
     *
     * @param {Object} request
     *   The request object that will be sent.
     * @param {string} request.parent
     *   Required. The parent (project and location) where the Feature will be created.
     *   Specified in the format `projects/* /locations/*`.
     * @param {string} request.featureId
     *   The ID of the feature to create.
     * @param {google.cloud.gkehub.v1.Feature} request.resource
     *   The Feature resource to create.
     * @param {string} request.requestId
     *   Optional. A request ID to identify requests. Specify a unique request ID
     *   so that if you must retry your request, the server will know to ignore
     *   the request if it has already been completed. The server will guarantee
     *   that for at least 60 minutes after the first request.
     *
     *   For example, consider a situation where you make an initial request and
     *   the request times out. If you make the request again with the same request
     *   ID, the server can check if original operation with the same request ID
     *   was received, and if so, will ignore the second request. This prevents
     *   clients from accidentally creating duplicate commitments.
     *
     *   The request ID must be a valid UUID with the exception that zero UUID is
     *   not supported (00000000-0000-0000-0000-000000000000).
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Promise} - The promise which resolves to an array.
     *   The first element of the array is an object representing
     *   a long running operation. Its `promise()` method returns a promise
     *   you can `await` for.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations | documentation }
     *   for more details and examples.
     * @example <caption>include:samples/generated/v1/gke_hub.create_feature.js</caption>
     * region_tag:gkehub_v1_generated_GkeHub_CreateFeature_async
     */
    createFeature(request?: protos.google.cloud.gkehub.v1.ICreateFeatureRequest, options?: CallOptions): Promise<[
        LROperation<protos.google.cloud.gkehub.v1.IFeature, protos.google.cloud.gkehub.v1.IOperationMetadata>,
        protos.google.longrunning.IOperation | undefined,
        {} | undefined
    ]>;
    createFeature(request: protos.google.cloud.gkehub.v1.ICreateFeatureRequest, options: CallOptions, callback: Callback<LROperation<protos.google.cloud.gkehub.v1.IFeature, protos.google.cloud.gkehub.v1.IOperationMetadata>, protos.google.longrunning.IOperation | null | undefined, {} | null | undefined>): void;
    createFeature(request: protos.google.cloud.gkehub.v1.ICreateFeatureRequest, callback: Callback<LROperation<protos.google.cloud.gkehub.v1.IFeature, protos.google.cloud.gkehub.v1.IOperationMetadata>, protos.google.longrunning.IOperation | null | undefined, {} | null | undefined>): void;
    /**
     * Check the status of the long running operation returned by `createFeature()`.
     * @param {String} name
     *   The operation name that will be passed.
     * @returns {Promise} - The promise which resolves to an object.
     *   The decoded operation object has result and metadata field to get information from.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations | documentation }
     *   for more details and examples.
     * @example <caption>include:samples/generated/v1/gke_hub.create_feature.js</caption>
     * region_tag:gkehub_v1_generated_GkeHub_CreateFeature_async
     */
    checkCreateFeatureProgress(name: string): Promise<LROperation<protos.google.cloud.gkehub.v1.Feature, protos.google.cloud.gkehub.v1.OperationMetadata>>;
    /**
     * Removes a Membership.
     *
     * **This is currently only supported for GKE clusters on Google Cloud**.
     * To unregister other clusters, follow the instructions at
     * https://cloud.google.com/anthos/multicluster-management/connect/unregistering-a-cluster.
     *
     * @param {Object} request
     *   The request object that will be sent.
     * @param {string} request.name
     *   Required. The Membership resource name in the format
     *   `projects/* /locations/* /memberships/*`.
     * @param {string} [request.requestId]
     *   Optional. A request ID to identify requests. Specify a unique request ID
     *   so that if you must retry your request, the server will know to ignore
     *   the request if it has already been completed. The server will guarantee
     *   that for at least 60 minutes after the first request.
     *
     *   For example, consider a situation where you make an initial request and
     *   the request times out. If you make the request again with the same request
     *   ID, the server can check if original operation with the same request ID
     *   was received, and if so, will ignore the second request. This prevents
     *   clients from accidentally creating duplicate commitments.
     *
     *   The request ID must be a valid UUID with the exception that zero UUID is
     *   not supported (00000000-0000-0000-0000-000000000000).
     * @param {boolean} [request.force]
     *   Optional. If set to true, any subresource from this Membership will also be
     *   deleted. Otherwise, the request will only work if the Membership has no
     *   subresource.
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Promise} - The promise which resolves to an array.
     *   The first element of the array is an object representing
     *   a long running operation. Its `promise()` method returns a promise
     *   you can `await` for.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations | documentation }
     *   for more details and examples.
     * @example <caption>include:samples/generated/v1/gke_hub.delete_membership.js</caption>
     * region_tag:gkehub_v1_generated_GkeHub_DeleteMembership_async
     */
    deleteMembership(request?: protos.google.cloud.gkehub.v1.IDeleteMembershipRequest, options?: CallOptions): Promise<[
        LROperation<protos.google.protobuf.IEmpty, protos.google.cloud.gkehub.v1.IOperationMetadata>,
        protos.google.longrunning.IOperation | undefined,
        {} | undefined
    ]>;
    deleteMembership(request: protos.google.cloud.gkehub.v1.IDeleteMembershipRequest, options: CallOptions, callback: Callback<LROperation<protos.google.protobuf.IEmpty, protos.google.cloud.gkehub.v1.IOperationMetadata>, protos.google.longrunning.IOperation | null | undefined, {} | null | undefined>): void;
    deleteMembership(request: protos.google.cloud.gkehub.v1.IDeleteMembershipRequest, callback: Callback<LROperation<protos.google.protobuf.IEmpty, protos.google.cloud.gkehub.v1.IOperationMetadata>, protos.google.longrunning.IOperation | null | undefined, {} | null | undefined>): void;
    /**
     * Check the status of the long running operation returned by `deleteMembership()`.
     * @param {String} name
     *   The operation name that will be passed.
     * @returns {Promise} - The promise which resolves to an object.
     *   The decoded operation object has result and metadata field to get information from.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations | documentation }
     *   for more details and examples.
     * @example <caption>include:samples/generated/v1/gke_hub.delete_membership.js</caption>
     * region_tag:gkehub_v1_generated_GkeHub_DeleteMembership_async
     */
    checkDeleteMembershipProgress(name: string): Promise<LROperation<protos.google.protobuf.Empty, protos.google.cloud.gkehub.v1.OperationMetadata>>;
    /**
     * Removes a Feature.
     *
     * @param {Object} request
     *   The request object that will be sent.
     * @param {string} request.name
     *   Required. The Feature resource name in the format
     *   `projects/* /locations/* /features/*`.
     * @param {boolean} request.force
     *   If set to true, the delete will ignore any outstanding resources for
     *   this Feature (that is, `FeatureState.has_resources` is set to true). These
     *   resources will NOT be cleaned up or modified in any way.
     * @param {string} [request.requestId]
     *   Optional. A request ID to identify requests. Specify a unique request ID
     *   so that if you must retry your request, the server will know to ignore
     *   the request if it has already been completed. The server will guarantee
     *   that for at least 60 minutes after the first request.
     *
     *   For example, consider a situation where you make an initial request and
     *   the request times out. If you make the request again with the same request
     *   ID, the server can check if original operation with the same request ID
     *   was received, and if so, will ignore the second request. This prevents
     *   clients from accidentally creating duplicate commitments.
     *
     *   The request ID must be a valid UUID with the exception that zero UUID is
     *   not supported (00000000-0000-0000-0000-000000000000).
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Promise} - The promise which resolves to an array.
     *   The first element of the array is an object representing
     *   a long running operation. Its `promise()` method returns a promise
     *   you can `await` for.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations | documentation }
     *   for more details and examples.
     * @example <caption>include:samples/generated/v1/gke_hub.delete_feature.js</caption>
     * region_tag:gkehub_v1_generated_GkeHub_DeleteFeature_async
     */
    deleteFeature(request?: protos.google.cloud.gkehub.v1.IDeleteFeatureRequest, options?: CallOptions): Promise<[
        LROperation<protos.google.protobuf.IEmpty, protos.google.cloud.gkehub.v1.IOperationMetadata>,
        protos.google.longrunning.IOperation | undefined,
        {} | undefined
    ]>;
    deleteFeature(request: protos.google.cloud.gkehub.v1.IDeleteFeatureRequest, options: CallOptions, callback: Callback<LROperation<protos.google.protobuf.IEmpty, protos.google.cloud.gkehub.v1.IOperationMetadata>, protos.google.longrunning.IOperation | null | undefined, {} | null | undefined>): void;
    deleteFeature(request: protos.google.cloud.gkehub.v1.IDeleteFeatureRequest, callback: Callback<LROperation<protos.google.protobuf.IEmpty, protos.google.cloud.gkehub.v1.IOperationMetadata>, protos.google.longrunning.IOperation | null | undefined, {} | null | undefined>): void;
    /**
     * Check the status of the long running operation returned by `deleteFeature()`.
     * @param {String} name
     *   The operation name that will be passed.
     * @returns {Promise} - The promise which resolves to an object.
     *   The decoded operation object has result and metadata field to get information from.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations | documentation }
     *   for more details and examples.
     * @example <caption>include:samples/generated/v1/gke_hub.delete_feature.js</caption>
     * region_tag:gkehub_v1_generated_GkeHub_DeleteFeature_async
     */
    checkDeleteFeatureProgress(name: string): Promise<LROperation<protos.google.protobuf.Empty, protos.google.cloud.gkehub.v1.OperationMetadata>>;
    /**
     * Updates an existing Membership.
     *
     * @param {Object} request
     *   The request object that will be sent.
     * @param {string} request.name
     *   Required. The Membership resource name in the format
     *   `projects/* /locations/* /memberships/*`.
     * @param {google.protobuf.FieldMask} request.updateMask
     *   Required. Mask of fields to update.
     * @param {google.cloud.gkehub.v1.Membership} request.resource
     *   Required. Only fields specified in update_mask are updated.
     *   If you specify a field in the update_mask but don't specify its value here
     *   that field will be deleted.
     *   If you are updating a map field, set the value of a key to null or empty
     *   string to delete the key from the map. It's not possible to update a key's
     *   value to the empty string.
     *   If you specify the update_mask to be a special path "*", fully replaces all
     *   user-modifiable fields to match `resource`.
     * @param {string} [request.requestId]
     *   Optional. A request ID to identify requests. Specify a unique request ID
     *   so that if you must retry your request, the server will know to ignore
     *   the request if it has already been completed. The server will guarantee
     *   that for at least 60 minutes after the first request.
     *
     *   For example, consider a situation where you make an initial request and
     *   the request times out. If you make the request again with the same request
     *   ID, the server can check if original operation with the same request ID
     *   was received, and if so, will ignore the second request. This prevents
     *   clients from accidentally creating duplicate commitments.
     *
     *   The request ID must be a valid UUID with the exception that zero UUID is
     *   not supported (00000000-0000-0000-0000-000000000000).
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Promise} - The promise which resolves to an array.
     *   The first element of the array is an object representing
     *   a long running operation. Its `promise()` method returns a promise
     *   you can `await` for.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations | documentation }
     *   for more details and examples.
     * @example <caption>include:samples/generated/v1/gke_hub.update_membership.js</caption>
     * region_tag:gkehub_v1_generated_GkeHub_UpdateMembership_async
     */
    updateMembership(request?: protos.google.cloud.gkehub.v1.IUpdateMembershipRequest, options?: CallOptions): Promise<[
        LROperation<protos.google.cloud.gkehub.v1.IMembership, protos.google.cloud.gkehub.v1.IOperationMetadata>,
        protos.google.longrunning.IOperation | undefined,
        {} | undefined
    ]>;
    updateMembership(request: protos.google.cloud.gkehub.v1.IUpdateMembershipRequest, options: CallOptions, callback: Callback<LROperation<protos.google.cloud.gkehub.v1.IMembership, protos.google.cloud.gkehub.v1.IOperationMetadata>, protos.google.longrunning.IOperation | null | undefined, {} | null | undefined>): void;
    updateMembership(request: protos.google.cloud.gkehub.v1.IUpdateMembershipRequest, callback: Callback<LROperation<protos.google.cloud.gkehub.v1.IMembership, protos.google.cloud.gkehub.v1.IOperationMetadata>, protos.google.longrunning.IOperation | null | undefined, {} | null | undefined>): void;
    /**
     * Check the status of the long running operation returned by `updateMembership()`.
     * @param {String} name
     *   The operation name that will be passed.
     * @returns {Promise} - The promise which resolves to an object.
     *   The decoded operation object has result and metadata field to get information from.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations | documentation }
     *   for more details and examples.
     * @example <caption>include:samples/generated/v1/gke_hub.update_membership.js</caption>
     * region_tag:gkehub_v1_generated_GkeHub_UpdateMembership_async
     */
    checkUpdateMembershipProgress(name: string): Promise<LROperation<protos.google.cloud.gkehub.v1.Membership, protos.google.cloud.gkehub.v1.OperationMetadata>>;
    /**
     * Updates an existing Feature.
     *
     * @param {Object} request
     *   The request object that will be sent.
     * @param {string} request.name
     *   Required. The Feature resource name in the format
     *   `projects/* /locations/* /features/*`.
     * @param {google.protobuf.FieldMask} request.updateMask
     *   Mask of fields to update.
     * @param {google.cloud.gkehub.v1.Feature} request.resource
     *   Only fields specified in update_mask are updated.
     *   If you specify a field in the update_mask but don't specify its value here
     *   that field will be deleted.
     *   If you are updating a map field, set the value of a key to null or empty
     *   string to delete the key from the map. It's not possible to update a key's
     *   value to the empty string.
     *   If you specify the update_mask to be a special path "*", fully replaces all
     *   user-modifiable fields to match `resource`.
     * @param {string} request.requestId
     *   Optional. A request ID to identify requests. Specify a unique request ID
     *   so that if you must retry your request, the server will know to ignore
     *   the request if it has already been completed. The server will guarantee
     *   that for at least 60 minutes after the first request.
     *
     *   For example, consider a situation where you make an initial request and
     *   the request times out. If you make the request again with the same request
     *   ID, the server can check if original operation with the same request ID
     *   was received, and if so, will ignore the second request. This prevents
     *   clients from accidentally creating duplicate commitments.
     *
     *   The request ID must be a valid UUID with the exception that zero UUID is
     *   not supported (00000000-0000-0000-0000-000000000000).
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Promise} - The promise which resolves to an array.
     *   The first element of the array is an object representing
     *   a long running operation. Its `promise()` method returns a promise
     *   you can `await` for.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations | documentation }
     *   for more details and examples.
     * @example <caption>include:samples/generated/v1/gke_hub.update_feature.js</caption>
     * region_tag:gkehub_v1_generated_GkeHub_UpdateFeature_async
     */
    updateFeature(request?: protos.google.cloud.gkehub.v1.IUpdateFeatureRequest, options?: CallOptions): Promise<[
        LROperation<protos.google.cloud.gkehub.v1.IFeature, protos.google.cloud.gkehub.v1.IOperationMetadata>,
        protos.google.longrunning.IOperation | undefined,
        {} | undefined
    ]>;
    updateFeature(request: protos.google.cloud.gkehub.v1.IUpdateFeatureRequest, options: CallOptions, callback: Callback<LROperation<protos.google.cloud.gkehub.v1.IFeature, protos.google.cloud.gkehub.v1.IOperationMetadata>, protos.google.longrunning.IOperation | null | undefined, {} | null | undefined>): void;
    updateFeature(request: protos.google.cloud.gkehub.v1.IUpdateFeatureRequest, callback: Callback<LROperation<protos.google.cloud.gkehub.v1.IFeature, protos.google.cloud.gkehub.v1.IOperationMetadata>, protos.google.longrunning.IOperation | null | undefined, {} | null | undefined>): void;
    /**
     * Check the status of the long running operation returned by `updateFeature()`.
     * @param {String} name
     *   The operation name that will be passed.
     * @returns {Promise} - The promise which resolves to an object.
     *   The decoded operation object has result and metadata field to get information from.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations | documentation }
     *   for more details and examples.
     * @example <caption>include:samples/generated/v1/gke_hub.update_feature.js</caption>
     * region_tag:gkehub_v1_generated_GkeHub_UpdateFeature_async
     */
    checkUpdateFeatureProgress(name: string): Promise<LROperation<protos.google.cloud.gkehub.v1.Feature, protos.google.cloud.gkehub.v1.OperationMetadata>>;
    /**
     * Lists Memberships in a given project and location.
     *
     * @param {Object} request
     *   The request object that will be sent.
     * @param {string} request.parent
     *   Required. The parent (project and location) where the Memberships will be
     *   listed. Specified in the format `projects/* /locations/*`.
     *   `projects/* /locations/-` list memberships in all the regions.
     * @param {number} [request.pageSize]
     *   Optional. When requesting a 'page' of resources, `page_size` specifies
     *   number of resources to return. If unspecified or set to 0, all resources
     *   will be returned.
     * @param {string} [request.pageToken]
     *   Optional. Token returned by previous call to `ListMemberships` which
     *   specifies the position in the list from where to continue listing the
     *   resources.
     * @param {string} [request.filter]
     *   Optional. Lists Memberships that match the filter expression, following the
     *   syntax outlined in https://google.aip.dev/160.
     *
     *   Examples:
     *
     *     - Name is `bar` in project `foo-proj` and location `global`:
     *
     *         name = "projects/foo-proj/locations/global/membership/bar"
     *
     *     - Memberships that have a label called `foo`:
     *
     *         labels.foo:*
     *
     *     - Memberships that have a label called `foo` whose value is `bar`:
     *
     *         labels.foo = bar
     *
     *     - Memberships in the CREATING state:
     *
     *         state = CREATING
     * @param {string} [request.orderBy]
     *   Optional. One or more fields to compare and use to sort the output.
     *   See https://google.aip.dev/132#ordering.
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Promise} - The promise which resolves to an array.
     *   The first element of the array is Array of {@link protos.google.cloud.gkehub.v1.Membership|Membership}.
     *   The client library will perform auto-pagination by default: it will call the API as many
     *   times as needed and will merge results from all the pages into this array.
     *   Note that it can affect your quota.
     *   We recommend using `listMembershipsAsync()`
     *   method described below for async iteration which you can stop as needed.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
     *   for more details and examples.
     */
    listMemberships(request?: protos.google.cloud.gkehub.v1.IListMembershipsRequest, options?: CallOptions): Promise<[
        protos.google.cloud.gkehub.v1.IMembership[],
        protos.google.cloud.gkehub.v1.IListMembershipsRequest | null,
        protos.google.cloud.gkehub.v1.IListMembershipsResponse
    ]>;
    listMemberships(request: protos.google.cloud.gkehub.v1.IListMembershipsRequest, options: CallOptions, callback: PaginationCallback<protos.google.cloud.gkehub.v1.IListMembershipsRequest, protos.google.cloud.gkehub.v1.IListMembershipsResponse | null | undefined, protos.google.cloud.gkehub.v1.IMembership>): void;
    listMemberships(request: protos.google.cloud.gkehub.v1.IListMembershipsRequest, callback: PaginationCallback<protos.google.cloud.gkehub.v1.IListMembershipsRequest, protos.google.cloud.gkehub.v1.IListMembershipsResponse | null | undefined, protos.google.cloud.gkehub.v1.IMembership>): void;
    /**
     * Equivalent to `method.name.toCamelCase()`, but returns a NodeJS Stream object.
     * @param {Object} request
     *   The request object that will be sent.
     * @param {string} request.parent
     *   Required. The parent (project and location) where the Memberships will be
     *   listed. Specified in the format `projects/* /locations/*`.
     *   `projects/* /locations/-` list memberships in all the regions.
     * @param {number} [request.pageSize]
     *   Optional. When requesting a 'page' of resources, `page_size` specifies
     *   number of resources to return. If unspecified or set to 0, all resources
     *   will be returned.
     * @param {string} [request.pageToken]
     *   Optional. Token returned by previous call to `ListMemberships` which
     *   specifies the position in the list from where to continue listing the
     *   resources.
     * @param {string} [request.filter]
     *   Optional. Lists Memberships that match the filter expression, following the
     *   syntax outlined in https://google.aip.dev/160.
     *
     *   Examples:
     *
     *     - Name is `bar` in project `foo-proj` and location `global`:
     *
     *         name = "projects/foo-proj/locations/global/membership/bar"
     *
     *     - Memberships that have a label called `foo`:
     *
     *         labels.foo:*
     *
     *     - Memberships that have a label called `foo` whose value is `bar`:
     *
     *         labels.foo = bar
     *
     *     - Memberships in the CREATING state:
     *
     *         state = CREATING
     * @param {string} [request.orderBy]
     *   Optional. One or more fields to compare and use to sort the output.
     *   See https://google.aip.dev/132#ordering.
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Stream}
     *   An object stream which emits an object representing {@link protos.google.cloud.gkehub.v1.Membership|Membership} on 'data' event.
     *   The client library will perform auto-pagination by default: it will call the API as many
     *   times as needed. Note that it can affect your quota.
     *   We recommend using `listMembershipsAsync()`
     *   method described below for async iteration which you can stop as needed.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
     *   for more details and examples.
     */
    listMembershipsStream(request?: protos.google.cloud.gkehub.v1.IListMembershipsRequest, options?: CallOptions): Transform;
    /**
     * Equivalent to `listMemberships`, but returns an iterable object.
     *
     * `for`-`await`-`of` syntax is used with the iterable to get response elements on-demand.
     * @param {Object} request
     *   The request object that will be sent.
     * @param {string} request.parent
     *   Required. The parent (project and location) where the Memberships will be
     *   listed. Specified in the format `projects/* /locations/*`.
     *   `projects/* /locations/-` list memberships in all the regions.
     * @param {number} [request.pageSize]
     *   Optional. When requesting a 'page' of resources, `page_size` specifies
     *   number of resources to return. If unspecified or set to 0, all resources
     *   will be returned.
     * @param {string} [request.pageToken]
     *   Optional. Token returned by previous call to `ListMemberships` which
     *   specifies the position in the list from where to continue listing the
     *   resources.
     * @param {string} [request.filter]
     *   Optional. Lists Memberships that match the filter expression, following the
     *   syntax outlined in https://google.aip.dev/160.
     *
     *   Examples:
     *
     *     - Name is `bar` in project `foo-proj` and location `global`:
     *
     *         name = "projects/foo-proj/locations/global/membership/bar"
     *
     *     - Memberships that have a label called `foo`:
     *
     *         labels.foo:*
     *
     *     - Memberships that have a label called `foo` whose value is `bar`:
     *
     *         labels.foo = bar
     *
     *     - Memberships in the CREATING state:
     *
     *         state = CREATING
     * @param {string} [request.orderBy]
     *   Optional. One or more fields to compare and use to sort the output.
     *   See https://google.aip.dev/132#ordering.
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Object}
     *   An iterable Object that allows {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols | async iteration }.
     *   When you iterate the returned iterable, each element will be an object representing
     *   {@link protos.google.cloud.gkehub.v1.Membership|Membership}. The API will be called under the hood as needed, once per the page,
     *   so you can stop the iteration when you don't need more results.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
     *   for more details and examples.
     * @example <caption>include:samples/generated/v1/gke_hub.list_memberships.js</caption>
     * region_tag:gkehub_v1_generated_GkeHub_ListMemberships_async
     */
    listMembershipsAsync(request?: protos.google.cloud.gkehub.v1.IListMembershipsRequest, options?: CallOptions): AsyncIterable<protos.google.cloud.gkehub.v1.IMembership>;
    /**
     * Lists Features in a given project and location.
     *
     * @param {Object} request
     *   The request object that will be sent.
     * @param {string} request.parent
     *   Required. The parent (project and location) where the Features will be listed.
     *   Specified in the format `projects/* /locations/*`.
     * @param {number} request.pageSize
     *   When requesting a 'page' of resources, `page_size` specifies number of
     *   resources to return. If unspecified or set to 0, all resources will
     *   be returned.
     * @param {string} request.pageToken
     *   Token returned by previous call to `ListFeatures` which
     *   specifies the position in the list from where to continue listing the
     *   resources.
     * @param {string} request.filter
     *   Lists Features that match the filter expression, following the syntax
     *   outlined in https://google.aip.dev/160.
     *
     *   Examples:
     *
     *     - Feature with the name "servicemesh" in project "foo-proj":
     *
     *         name = "projects/foo-proj/locations/global/features/servicemesh"
     *
     *     - Features that have a label called `foo`:
     *
     *         labels.foo:*
     *
     *     - Features that have a label called `foo` whose value is `bar`:
     *
     *         labels.foo = bar
     * @param {string} request.orderBy
     *   One or more fields to compare and use to sort the output.
     *   See https://google.aip.dev/132#ordering.
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Promise} - The promise which resolves to an array.
     *   The first element of the array is Array of {@link protos.google.cloud.gkehub.v1.Feature|Feature}.
     *   The client library will perform auto-pagination by default: it will call the API as many
     *   times as needed and will merge results from all the pages into this array.
     *   Note that it can affect your quota.
     *   We recommend using `listFeaturesAsync()`
     *   method described below for async iteration which you can stop as needed.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
     *   for more details and examples.
     */
    listFeatures(request?: protos.google.cloud.gkehub.v1.IListFeaturesRequest, options?: CallOptions): Promise<[
        protos.google.cloud.gkehub.v1.IFeature[],
        protos.google.cloud.gkehub.v1.IListFeaturesRequest | null,
        protos.google.cloud.gkehub.v1.IListFeaturesResponse
    ]>;
    listFeatures(request: protos.google.cloud.gkehub.v1.IListFeaturesRequest, options: CallOptions, callback: PaginationCallback<protos.google.cloud.gkehub.v1.IListFeaturesRequest, protos.google.cloud.gkehub.v1.IListFeaturesResponse | null | undefined, protos.google.cloud.gkehub.v1.IFeature>): void;
    listFeatures(request: protos.google.cloud.gkehub.v1.IListFeaturesRequest, callback: PaginationCallback<protos.google.cloud.gkehub.v1.IListFeaturesRequest, protos.google.cloud.gkehub.v1.IListFeaturesResponse | null | undefined, protos.google.cloud.gkehub.v1.IFeature>): void;
    /**
     * Equivalent to `method.name.toCamelCase()`, but returns a NodeJS Stream object.
     * @param {Object} request
     *   The request object that will be sent.
     * @param {string} request.parent
     *   Required. The parent (project and location) where the Features will be listed.
     *   Specified in the format `projects/* /locations/*`.
     * @param {number} request.pageSize
     *   When requesting a 'page' of resources, `page_size` specifies number of
     *   resources to return. If unspecified or set to 0, all resources will
     *   be returned.
     * @param {string} request.pageToken
     *   Token returned by previous call to `ListFeatures` which
     *   specifies the position in the list from where to continue listing the
     *   resources.
     * @param {string} request.filter
     *   Lists Features that match the filter expression, following the syntax
     *   outlined in https://google.aip.dev/160.
     *
     *   Examples:
     *
     *     - Feature with the name "servicemesh" in project "foo-proj":
     *
     *         name = "projects/foo-proj/locations/global/features/servicemesh"
     *
     *     - Features that have a label called `foo`:
     *
     *         labels.foo:*
     *
     *     - Features that have a label called `foo` whose value is `bar`:
     *
     *         labels.foo = bar
     * @param {string} request.orderBy
     *   One or more fields to compare and use to sort the output.
     *   See https://google.aip.dev/132#ordering.
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Stream}
     *   An object stream which emits an object representing {@link protos.google.cloud.gkehub.v1.Feature|Feature} on 'data' event.
     *   The client library will perform auto-pagination by default: it will call the API as many
     *   times as needed. Note that it can affect your quota.
     *   We recommend using `listFeaturesAsync()`
     *   method described below for async iteration which you can stop as needed.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
     *   for more details and examples.
     */
    listFeaturesStream(request?: protos.google.cloud.gkehub.v1.IListFeaturesRequest, options?: CallOptions): Transform;
    /**
     * Equivalent to `listFeatures`, but returns an iterable object.
     *
     * `for`-`await`-`of` syntax is used with the iterable to get response elements on-demand.
     * @param {Object} request
     *   The request object that will be sent.
     * @param {string} request.parent
     *   Required. The parent (project and location) where the Features will be listed.
     *   Specified in the format `projects/* /locations/*`.
     * @param {number} request.pageSize
     *   When requesting a 'page' of resources, `page_size` specifies number of
     *   resources to return. If unspecified or set to 0, all resources will
     *   be returned.
     * @param {string} request.pageToken
     *   Token returned by previous call to `ListFeatures` which
     *   specifies the position in the list from where to continue listing the
     *   resources.
     * @param {string} request.filter
     *   Lists Features that match the filter expression, following the syntax
     *   outlined in https://google.aip.dev/160.
     *
     *   Examples:
     *
     *     - Feature with the name "servicemesh" in project "foo-proj":
     *
     *         name = "projects/foo-proj/locations/global/features/servicemesh"
     *
     *     - Features that have a label called `foo`:
     *
     *         labels.foo:*
     *
     *     - Features that have a label called `foo` whose value is `bar`:
     *
     *         labels.foo = bar
     * @param {string} request.orderBy
     *   One or more fields to compare and use to sort the output.
     *   See https://google.aip.dev/132#ordering.
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Object}
     *   An iterable Object that allows {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols | async iteration }.
     *   When you iterate the returned iterable, each element will be an object representing
     *   {@link protos.google.cloud.gkehub.v1.Feature|Feature}. The API will be called under the hood as needed, once per the page,
     *   so you can stop the iteration when you don't need more results.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
     *   for more details and examples.
     * @example <caption>include:samples/generated/v1/gke_hub.list_features.js</caption>
     * region_tag:gkehub_v1_generated_GkeHub_ListFeatures_async
     */
    listFeaturesAsync(request?: protos.google.cloud.gkehub.v1.IListFeaturesRequest, options?: CallOptions): AsyncIterable<protos.google.cloud.gkehub.v1.IFeature>;
    /**
     * Return a fully-qualified feature resource name string.
     *
     * @param {string} project
     * @param {string} location
     * @param {string} feature
     * @returns {string} Resource name string.
     */
    featurePath(project: string, location: string, feature: string): string;
    /**
     * Parse the project from Feature resource.
     *
     * @param {string} featureName
     *   A fully-qualified path representing Feature resource.
     * @returns {string} A string representing the project.
     */
    matchProjectFromFeatureName(featureName: string): string | number;
    /**
     * Parse the location from Feature resource.
     *
     * @param {string} featureName
     *   A fully-qualified path representing Feature resource.
     * @returns {string} A string representing the location.
     */
    matchLocationFromFeatureName(featureName: string): string | number;
    /**
     * Parse the feature from Feature resource.
     *
     * @param {string} featureName
     *   A fully-qualified path representing Feature resource.
     * @returns {string} A string representing the feature.
     */
    matchFeatureFromFeatureName(featureName: string): string | number;
    /**
     * Return a fully-qualified location resource name string.
     *
     * @param {string} project
     * @param {string} location
     * @returns {string} Resource name string.
     */
    locationPath(project: string, location: string): string;
    /**
     * Parse the project from Location resource.
     *
     * @param {string} locationName
     *   A fully-qualified path representing Location resource.
     * @returns {string} A string representing the project.
     */
    matchProjectFromLocationName(locationName: string): string | number;
    /**
     * Parse the location from Location resource.
     *
     * @param {string} locationName
     *   A fully-qualified path representing Location resource.
     * @returns {string} A string representing the location.
     */
    matchLocationFromLocationName(locationName: string): string | number;
    /**
     * Return a fully-qualified membership resource name string.
     *
     * @param {string} project
     * @param {string} location
     * @param {string} membership
     * @returns {string} Resource name string.
     */
    membershipPath(project: string, location: string, membership: string): string;
    /**
     * Parse the project from Membership resource.
     *
     * @param {string} membershipName
     *   A fully-qualified path representing Membership resource.
     * @returns {string} A string representing the project.
     */
    matchProjectFromMembershipName(membershipName: string): string | number;
    /**
     * Parse the location from Membership resource.
     *
     * @param {string} membershipName
     *   A fully-qualified path representing Membership resource.
     * @returns {string} A string representing the location.
     */
    matchLocationFromMembershipName(membershipName: string): string | number;
    /**
     * Parse the membership from Membership resource.
     *
     * @param {string} membershipName
     *   A fully-qualified path representing Membership resource.
     * @returns {string} A string representing the membership.
     */
    matchMembershipFromMembershipName(membershipName: string): string | number;
    /**
     * Return a fully-qualified project resource name string.
     *
     * @param {string} project
     * @returns {string} Resource name string.
     */
    projectPath(project: string): string;
    /**
     * Parse the project from Project resource.
     *
     * @param {string} projectName
     *   A fully-qualified path representing Project resource.
     * @returns {string} A string representing the project.
     */
    matchProjectFromProjectName(projectName: string): string | number;
    /**
     * Terminate the gRPC channel and close the client.
     *
     * The client will no longer be usable and all future behavior is undefined.
     * @returns {Promise} A promise that resolves when the client is closed.
     */
    close(): Promise<void>;
}
